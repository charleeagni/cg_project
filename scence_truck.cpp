#include<stdio.h>
#include <GLUT/glut.h>
#include<stdio.h>
#include<math.h>
#include<stdlib.h>

int motion_var = 0;
int hights_of_grass[1000];
int hight_stored = 0;
//
int list_of_randoms[] = {436, 727, 4, 102, 683, 18, 675, 412, 310, 359, 191, 359, 346, 110, 248, 706, 562, 528, 740, 990, 20, 8, 417, 653, 371, 85, 26, 909, 188, 41, 16, 63, 323, 714, 912, 262, 983, 839, 643, 563, 302, 619, 244, 876, 455, 244, 315, 66, 855, 109, 137, 80, 71, 36, 750, 183, 518, 397, 697, 327, 251, 91, 122, 865, 913, 968, 205, 734, 241, 222, 116, 810, 292, 724, 962, 756, 54, 292, 504, 742, 630, 160, 138, 401, 386, 437, 243, 845, 783, 217, 672, 943, 495, 942, 497, 50, 253, 275,121,728, 947, 937, 587, 302, 36, 646, 395, 672, 908, 904, 911, 832, 522, 825, 420, 137, 184, 970, 36, 419, 320, 84, 977, 779, 17, 200, 669, 540, 810, 181, 491, 353, 342, 628, 530, 367, 210, 7, 400, 336, 757, 414, 742, 483, 106, 988, 316, 849, 775, 203, 140, 136, 221, 159, 985, 501, 829, 460, 777, 234, 848, 871, 230, 645, 177, 127, 776, 16, 965, 958, 95, 562, 477, 965, 414, 985, 964, 861, 148, 692, 902, 648, 540, 203, 250, 746, 202, 907, 12, 39, 699, 819, 204, 893, 267, 466, 185, 473, 148,827, 244, 976, 892, 430, 416, 97, 823, 369, 902, 49, 711, 419, 73, 431, 897, 243, 603, 756, 7, 584, 798, 847, 693, 888, 536, 194, 151, 875, 153, 492, 944, 455, 264, 252, 346, 373, 412, 95, 276, 820, 370, 984, 590, 498, 239, 95, 582, 539, 81, 40, 33, 811, 275, 106, 829, 759, 568, 872, 908, 757, 51, 164, 514, 732, 525, 691, 64, 199, 717, 285, 869, 964, 229, 759, 754, 336, 7, 188, 916, 796, 316, 380, 590, 410, 856, 656, 592, 638, 704, 851, 408, 487, 952, 954, 428, 999, 928, 54, 602, 689, 18,535, 909, 794, 51, 846, 857, 807, 27, 264, 792, 113, 10, 305, 19, 259, 99, 988, 352, 945, 672, 98, 948, 301, 187, 286, 937, 77, 228, 632, 897, 661, 689, 483, 959, 27, 295, 886, 56, 140, 445, 739, 650, 215, 611, 560, 161, 569, 250, 903, 997, 158, 971, 214, 717, 568, 426, 520, 107, 277, 853, 918, 330, 964, 1, 575, 791, 855, 637, 5, 655, 544, 108, 673, 671, 117, 887, 14, 629, 664, 112, 648, 63, 761, 474, 687, 69, 924, 628, 762, 38, 88, 975, 336, 305, 952, 983, 631, 921, 498, 565, 174, 33, 955,18, 596, 580, 751, 800, 786, 932, 527, 797, 780, 130, 961, 704, 552, 875, 613, 400, 496, 493, 886, 77, 68, 468, 896, 717, 259, 219, 67, 327, 908, 792, 12, 418, 497, 378, 656, 407, 439, 927, 879, 482, 961, 104, 429, 192, 58, 215, 300, 590, 683, 316, 163, 452, 375, 10, 548, 958, 325, 635, 201, 697, 37, 638, 284, 413, 284, 102, 737, 543, 510, 795, 572, 350, 74, 596, 483, 390, 49, 68, 51, 114, 784, 858, 810, 378, 361, 194, 162, 197, 566, 938, 325, 852, 343, 280, 204, 161, 992, 505, 884, 877,752, 190, 872, 522, 70, 812, 759, 301, 710, 492, 960, 105, 253, 239, 989, 552, 511, 932, 133, 204, 530, 253, 134, 332, 102, 878, 600, 63, 312, 460, 627, 672, 240, 62, 424, 742, 994, 863, 511, 830, 780, 185, 421, 395, 86, 225, 828, 2, 911, 125, 138, 361, 151, 790, 49, 565, 385, 643, 820, 740, 448, 856, 555, 751, 119, 727, 649, 415, 620, 154, 440, 136, 117, 0, 520, 571, 409, 986, 832, 917, 137, 470, 837, 377, 452, 591, 781, 903, 943, 436, 513, 440, 246, 131, 551, 664, 717, 500, 413, 798, 892, 168, 84, 40, 156, 891, 846, 831, 583, 238, 150, 396, 527, 819, 592, 894, 558, 724, 321, 429, 598, 870, 859, 696, 692, 756, 585, 466, 634, 349, 365, 133, 100, 956, 179, 739, 252, 583, 532, 281, 897, 825, 478, 321, 532, 589, 63, 902, 236, 928, 377, 695, 655, 730, 589, 50, 259, 21, 588, 98, 216, 597, 652, 473, 391, 776, 134, 903, 243, 98, 730, 918, 486, 664, 109, 296, 720, 802, 996, 187, 139, 60, 74, 733, 10, 294, 964, 488, 801, 68, 333, 951, 969, 49, 326, 43, 586, 752, 83, 402, 60, 428, 416, 704, 705, 704, 847, 356, 368, 762, 44, 540, 788, 231, 541, 9, 38, 566, 102, 976, 139, 779, 670, 129, 832, 920, 67, 565, 394, 539, 263, 668, 171, 670, 922, 307, 910, 278, 406, 443, 177, 552, 740, 789, 442, 608, 804, 287, 23, 208, 404, 52, 573, 661, 109, 963, 204, 222, 698, 565, 703, 263, 537, 742, 716, 236, 210, 85, 923, 466, 648, 987, 674, 695, 960, 900, 925, 644, 627, 468, 692, 864, 685, 36, 297, 716, 606, 500, 871, 66, 262, 336, 781, 446, 76, 77, 469, 399, 832, 90, 823, 106, 709, 241, 939, 122, 832, 370, 549, 468, 790, 684, 345, 103, 132, 439, 496, 524, 266, 377, 437, 330, 178, 929, 750, 845, 331, 333, 421, 490, 366, 950, 915, 912, 197, 990, 851, 548, 515, 247, 101, 252, 903, 628, 54, 180, 852, 189, 18, 566, 3, 974, 46, 474, 961, 344, 916, 867, 495, 259, 839, 584, 843, 202, 648, 124, 424, 987, 947, 268, 679, 676, 314, 358, 497, 782, 239, 900, 12, 662, 345, 180, 67, 200, 627, 221, 511, 534, 269, 631, 1, 988, 23, 922, 595, 741, 259, 137, 258, 106, 132, 77, 321, 934, 364, 556, 882, 434, 779, 620, 206, 548, 803, 404, 443, 872, 830, 703, 184, 943, 972, 531, 224, 849, 121, 831, 236, 678, 864, 149, 365, 77, 326, 428, 977, 993, 635, 117, 946, 702, 927, 389, 407, 720, 397, 130, 50, 385, 123, 644, 379, 602, 278, 844, 466, 167, 430, 164, 943, 24, 554, 364, 651, 557, 358, 867, 663, 135, 297, 344, 304, 703, 601, 532, 441, 836, 375, 788, 302, 907, 672, 656, 731, 233, 901, 796, 927, 181, 69, 495, 471, 611, 49, 854, 407
};

/*
int list_of_randoms[] = {
  227, 867, 801, 876, 924, 978, 900, 384, 451, 937, 224, 597, 762, 206, 958, 772, 94, 811, 431, 76, 467, 342, 633, 555, 433, 579, 404, 739, 185, 132, 736, 268, 134, 700, 750, 19, 874, 418, 747, 45, 784, 236, 164, 496, 183, 969, 958, 593, 924, 292, 669, 184, 700, 772, 959, 785, 514, 92, 295, 374, 683, 81, 208, 283, 76, 52, 903, 403, 782, 990, 643, 136, 942, 760, 850, 76, 193, 681, 195, 175, 258, 665, 517, 236, 100, 938, 936, 87, 347, 691, 775, 406, 412, 47, 981, 598, 210, 257, 938, 31, 19, 243, 194, 78, 893, 910, 660, 960, 401, 613, 922, 872, 166, 630, 917, 703, 28, 419, 571, 756, 839, 240, 175, 509, 753, 969, 699, 806, 65, 13, 572, 20, 440, 810, 391, 364, 664, 731, 331, 972, 614, 194, 770, 11, 61, 205, 194, 745, 663, 369, 965, 517, 220, 258, 188, 320, 787, 197, 682, 20, 768, 596, 725, 942, 606, 452, 179, 824, 355, 459, 613, 864, 240, 794, 807, 585, 701, 598, 914, 935, 457, 611, 542, 32, 313, 637, 345, 208, 945, 679, 476, 190, 217, 173, 938, 47, 473, 362, 590, 340, 4, 752, 157, 542, 230, 603, 635, 849, 988, 998, 262, 906, 442, 796, 291, 78, 802, 362, 209, 184, 329, 332, 653, 531, 48, 48, 413, 839, 695, 569, 784, 473, 174, 156, 405, 298, 966, 46, 330, 157, 402, 500, 623, 959, 187, 58, 942, 471, 392, 853, 264, 188, 627, 363, 923, 371, 43, 632, 191, 212, 238, 687, 210, 144, 766, 479, 581, 241, 568, 436, 916, 411, 247, 59, 521, 28, 210, 891, 241, 490, 508, 235, 419, 988, 464, 279, 293, 185, 860, 122, 606, 736, 410, 559, 148, 716, 641, 60, 485, 105, 456, 935, 19, 328, 245, 102, 0, 836, 658, 430, 131, 744, 588, 941, 591, 997, 43, 295, 112, 227, 919, 991, 136, 525, 438, 873, 743, 254, 629, 423, 560, 408, 299, 764, 511, 326, 225, 308, 29, 745, 453, 669, 224, 697, 803, 807, 513, 66, 808, 781, 763, 524, 857, 686, 820, 639, 314, 424, 587, 98, 48, 980, 529, 709, 347, 513, 515, 729, 716, 868, 911, 577, 841, 173, 32, 609, 432, 468, 70, 533, 884, 539, 697, 970, 189, 518, 234, 407, 515, 281, 475, 503, 339, 391, 589, 800, 3, 704, 370, 768, 366, 9, 701, 414, 734, 576, 633, 116, 98, 758, 201, 658, 629, 512, 948, 28, 168, 553, 485, 935, 32, 677, 904, 952, 223, 708, 846, 447, 687, 982, 858, 82, 630, 592, 37, 876, 91, 65, 280, 487, 96, 454, 489, 664, 465, 469, 234, 840, 306, 911, 945, 951, 748, 418, 635, 909, 888, 240, 815, 67, 331, 842, 708, 431, 453, 647, 770, 713, 12, 527, 988, 136, 755, 52, 218, 894, 981, 637, 360, 410, 252, 470, 9, 999, 5, 915, 367, 814, 945, 911, 947, 351, 234, 206, 263, 948, 27, 393, 379, 190, 29, 218, 466, 851, 902, 689, 908, 74, 757, 936, 581, 886, 794, 567, 969, 343, 785, 44, 534, 495, 718, 967, 192, 596, 62, 72, 697, 616, 643, 334, 192, 245, 799, 460, 774, 429, 825, 510, 246, 737, 160, 915, 251, 880, 510, 231, 737, 869, 493, 634, 696, 956, 851, 110, 272, 328, 313, 886, 277, 284, 624, 499, 478, 343, 795, 35, 7, 730, 303, 442, 636, 723, 337, 174, 717, 919, 235, 613, 508, 587, 842, 791, 305, 23, 631, 445, 813, 191, 46, 84, 236, 880, 167, 831, 270, 445, 609, 228, 48, 682, 682, 21, 600, 610, 595, 382, 935, 922, 571, 714, 214, 301, 768, 21, 480, 757, 652, 799, 244, 536, 205, 410, 39, 807, 52, 212, 26, 813, 100, 570, 305, 400, 180, 664, 27, 934, 643, 175, 599, 972, 434, 646, 221, 755, 239, 940, 854, 372, 395, 469, 399, 448, 684, 454, 461, 958, 721, 17, 685, 761, 95, 602, 618, 693, 759, 202, 383, 31, 570, 490, 79, 307, 645, 742, 341, 955, 499, 901, 897, 243, 628, 858, 616, 342, 104, 427, 311, 860, 593, 973, 909, 304, 168, 606, 217, 801, 372, 382, 475, 531, 68, 501, 304, 820, 315, 76, 142, 171, 87, 213, 864, 916, 135, 224, 897, 853, 218, 654, 105, 868, 28, 131, 35, 222, 890, 761, 323, 791, 22, 475, 948, 350, 318, 398, 198, 545, 956, 251, 110, 596, 995, 124, 431, 495, 470, 840, 758, 457, 696, 250, 28, 585, 174, 180, 363, 950, 791, 543, 598, 222, 19, 153, 157, 350, 838, 190, 37, 439, 146, 634, 281, 549, 37, 574, 792, 668, 850, 233, 759, 253, 996, 120, 27, 672, 750, 455, 202, 548, 122, 520, 166, 95, 845, 263, 314, 169, 113, 141, 195, 261, 95, 825, 769, 175, 231, 425, 601, 73, 968, 895, 892, 389, 39, 727, 455, 63, 533, 462, 230, 585, 829, 153, 26, 191, 737, 201, 172, 397, 81, 529, 344, 610, 991, 626, 99, 357, 766, 486, 948, 582, 480, 953, 29, 193, 17, 953, 497, 180, 919, 967, 162, 496, 24, 426, 810, 514, 31, 910, 838, 885, 629, 150, 891, 397, 125, 94, 688, 425, 766, 931, 356, 53, 641, 654, 949, 269, 798, 516, 287, 958, 106, 427, 48, 487, 493, 160, 528, 315, 107, 691, 903, 953, 40, 669, 441, 204, 765, 528, 501, 305, 999, 619, 730, 462, 967, 660, 28, 919, 735, 788, 925, 420, 452, 512, 517, 35, 64, 105, 118, 434, 830, 34, 39, 591, 994, 903, 932, 979, 713, 988, 605, 26, 957, 682, 935, 102, 272, 392, 543, 329, 240, 459, 591, 772, 741, 230, 468, 5, 295, 125, 714, 283, 371, 185, 359, 111, 340, 916, 29, 924, 582, 517, 898, 908, 432, 929, 873, 729, 944, 800, 21, 593, 907, 964, 321, 453, 474, 818, 119, 298, 547, 277, 18, 764, 215, 193, 498, 154, 872, 106, 140, 212, 917, 430, 325, 497, 218, 405, 390, 99, 620
};*/
float toradian(float degree){
    return (3.14159/180)*degree;
}

void draw_rectangle(float x, float y, float w, float h, int fill){
    if (fill)
        glBegin(GL_POLYGON);
    else
        glBegin(GL_LINE_LOOP);
        glVertex2f(x, y);
        glVertex2f(x+w, y);
        glVertex2f(x+w, y+h);
        glVertex2f(x, y+h);
    glEnd();
    glFlush();
}

void draw_circle(float x, float y, float r, int fill){
    float i;
    float x_cord, y_cord;
    if (fill)
        glBegin(GL_POLYGON);
    else
        glBegin(GL_POINTS);

    for (i = 0; i < 360; i+= 0.6){
        x_cord = x + r*cos(toradian((float)i));
        y_cord = y + r*sin(toradian((float)i));
        glVertex2f(x_cord, y_cord);
    }
    glEnd();
    glFlush();
}

void draw_half_circle(float x, float y, float r, int fill,float angle){
    float i;
    float x_cord, y_cord;

    if (fill)
        glBegin(GL_POLYGON);
    else
        glBegin(GL_POINTS);

    for (i = angle; i < angle+180; i+= 0.6){
        x_cord = x + r*cos(toradian((float)i));
        y_cord = y + r*sin(toradian((float)i));
        glVertex2f(x_cord, y_cord);
    }
    glEnd();
    glFlush();
}
void plastic_waste(int x, int y)
{
    glBegin(GL_POLYGON);
    glVertex2f(x,y);
    glVertex2f(x + 32,y - 10);
    glVertex2f(x + 46,y + 31);
    glVertex2f(x + 62,y + 10);
    glVertex2f(x + 33,y - 20);
    glEnd();
}

void plastic_waste2(int x, int y)
{
    glBegin(GL_POLYGON);
    glVertex2f(x,y);
    glVertex2f(x + 26,y - 20);
    glVertex2f(x + 46,y + 10);
    glVertex2f(x + 56,y);
    glVertex2f(x + 31,y - 20);
    glVertex2f(x + 3,y - 18);
    glEnd();
}

void plastic_waste3(int x, int y)
{
    glBegin(GL_POLYGON);
    glVertex2f(x , y);
    glVertex2f(x + 15, y + 5);
    glVertex2f(x + 22 , y - 20);
    glVertex2f(x + 4, y - 12);
    glEnd();
}

class mountain{
public:
   mountain(){
    //printf("object created\n" );
  }
  void draw_skyline() {

    for (int i = 0; i < 10; i++) {
      glColor3ub(70,70,70);
      int y_rand = 200+rand()%300;
      draw_rectangle(i*100,500,90,y_rand,1);
      int cool_val = 200;
      for(int h=0;h<(y_rand-cool_val)/10;h++){
        glColor3ub(200,200,0);
        if(i*100<500) {
          if(rand()%3 != 0)
            draw_rectangle(i*100+10,700+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+20,700+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+30,700+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+40,700+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+50,700+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+60,700+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+70,700+h*10,5,5,1);
        }
        else{
          int cool_val = 150;
          if(rand()%3 != 0)
            draw_rectangle(i*100+10,650+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+20,650+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+30,650+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+40,650+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+50,650+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+60,650+h*10,5,5,1);
          if(rand()%3 != 0)
            draw_rectangle(i*100+70,650+h*10,5,5,1);
        }
      }
    }
    glColor3ub(70,70,70);
    draw_rectangle(0,500,500,150,1);
    draw_rectangle(500,500,500,100,1);
  }
  void truck(int x,int y,float angle){
    glColor3ub(0,50,0);
    // drawing the trailer
    glPushMatrix();
    {
      glTranslatef(x+200,y,0);
      glRotatef(360-angle,0,0,1);
      glTranslatef(-x-200,-y,0);

      glBegin(GL_POLYGON);
        glVertex2f(x,y);
        glVertex2f(x+200,y);
        glVertex2f(x+200,y+100);
        glVertex2f(x+10,y+100);
        glVertex2f(x,y+125);
      glEnd();
      glColor3ub(150,150,0);
      draw_rectangle(x+200,y,5,100,1);
      glColor3ub(0,50,0);

      // back attachment
      if(angle == 0)
        draw_rectangle(x+205,y-20,10,120,1);
      else
        draw_rectangle(x+205,y+20,10,120,1);
      glColor3ub(30,30,30);


    }
    glPopMatrix();

    // wheels sit here
    draw_rectangle(x,y-20,200,20,1);
    draw_rectangle(x+20,y-40,80,20,1);
    draw_rectangle(x+185,y-40,10,20,1);
    // wheels
    glColor3ub(75,75,75);
    draw_circle(x+130,y-40,16,1);
    glColor3ub(30,30,30);
    draw_circle(x+130,y-40,15,1);
    glColor3ub(0,0,0);
    draw_circle(x+130,y-40,5,1);
    glColor3ub(100,100,100);
    draw_circle(x+130,y-40,1,1);

    glColor3ub(30,30,30);
    glColor3ub(75,75,75);
    draw_circle(x+165,y-40,16,1);
    glColor3ub(30,30,30);
    draw_circle(x+165,y-40,15,1);
    glColor3ub(0,0,0);
    draw_circle(x+165,y-40,5,1);
    glColor3ub(100,100,100);
    draw_circle(x+165,y-40,1,1);

    // engine part
    glColor3ub(75,0,0);
    glBegin(GL_POLYGON);
      glVertex2f(x-3,y);
      glVertex2f(x-50,y);
      glVertex2f(x-50,y+50);
      glVertex2f(x-30,y+100);
      glVertex2f(x-3,y+100);
    glEnd();
    glColor3ub(30,30,30);
    glBegin(GL_POLYGON);
      glVertex2f(x-3,y);
      glVertex2f(x-3,y-30);
      glVertex2f(x-50,y-30);
      glVertex2f(x-50,y);
    glEnd();

    // windows

    glBegin(GL_POLYGON);
      glVertex2f(x-45,y+50);
      glVertex2f(x-35,y+75);
      glVertex2f(x-30,y+95);
      glVertex2f(x-5,y+95);
      glVertex2f(x-5,y+50);
    glEnd();

    draw_rectangle(x-15,y+30,10,5,1);


    glColor3ub(0,0,0); // equate this to the background color

    draw_half_circle(x-25,y-30,18,1,0);

    glColor3ub(75,75,75);
    draw_circle(x-25,y-40,16,1);
    glColor3ub(30,30,30);
    draw_circle(x-25,y-40,15,1);
    glColor3ub(0,0,0);
    draw_circle(x-25,y-40,5,1);
    glColor3ub(100,100,100);
    draw_circle(x-25,y-40,1,1);

  }
  void plot_garbage() {
    glPointSize(5);
    glBegin(GL_POINTS);
    glColor3ub(100,0,0);
    for (int i = 0; i < 100; i++) {
      glVertex2f(list_of_randoms[i],list_of_randoms[1000-i]);
    }
    glEnd();
    glPointSize(1);


    glBegin(GL_LINES);
    for (int i = 0; i < 1000; i++) {
        glVertex2f(i/10+800,300*(float)sin(((float)i/10+800)/100)+200);
    }
    glEnd();

  }

};

void init()
{
	glClearColor(0.0,0.0,0.98,1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0,1000,0,1000);
}
void myReshape(int w,int h)
{
  printf("resized\n w=%d,h=%d",w,h);
	glClearColor(0.529,0.808,0.98,1.0);
	//glClearColor(0.50,0.88,0.96,0);
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<=h)
		glOrtho(0,1000,0*(GLfloat)h/(GLfloat)w,1000*(GLfloat)h/(GLfloat)w,0,1000);
	else
		glOrtho(0*(GLfloat)w/(GLfloat)h,1000*(GLfloat)w/(GLfloat)h,0,1000,0,1000);
	glMatrixMode(GL_MODELVIEW);
	glutPostRedisplay();

}

void display_scene3(){
  mountain m;
  glClearColor(0.3,0.3,0.3,1.0);
  glClear(GL_COLOR_BUFFER_BIT);
  //printf("yolo\n");
  // m.draw_skyline();
   m.plot_garbage();
  if(motion_var%1000<500)
    m.truck(0+motion_var%1000,200,0);
  else
    m.truck(500,200,(motion_var%1000)/100);

  glFlush();

  glutSwapBuffers();
}
void mouse(int button, int state,int x, int y){
  printf("called\n");
  if(state == GLUT_DOWN && button == GLUT_LEFT_BUTTON) {
    printf("x: %d, y: %d",x,y);
  }
}

void idle_func(){
  if (motion_var < 0){
    motion_var = 0;
  }
  motion_var+=10;
  glutPostRedisplay();
}
int main(int argc,char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
	glutInitWindowSize(1000,1000);
	glutCreateWindow("Scene1");
  glutMouseFunc(mouse);
	init();
  for (int i = 0; i <100; i++){
    if (&motion_var == &list_of_randoms[1000-i]){
      printf("%d\n", 1000-i );
      printf("jroijgiortj\n");
      printf("%d\n", &list_of_randoms[1000]);
    }
}
  glutIdleFunc(idle_func);
	//glutReshapeFunc(myReshape);
	glutDisplayFunc(display_scene3);
	glutMainLoop();
}
